@startuml
abstract class BoMapper {
    + {static} <<readonly>> packagePrefix : string = "BO4E.BO"
    + {static} MapObject(jobject:JObject, lenient:LenientParsing) : BusinessObject
    + {static} MapObject(jobject:JObject, userPropertiesWhiteList:HashSet<string>, lenient:LenientParsing) : BusinessObject
    + {static} MapObject(businessObjectName:string, jobject:JObject, lenient:LenientParsing) : BusinessObject
    + {static} MapObject(businessObjectType:Type, jobject:JObject, lenient:LenientParsing) : BusinessObject
    + {static} MapObject(jobject:JObject, lenient:LenientParsing) : BusinessObjectType
    + {static} MapObject(businessObjectName:string, jobject:JObject, userPropertiesWhiteList:HashSet<string>, lenient:LenientParsing) : BusinessObject
    + {static} MapObject(businessObjectType:Type, jobject:JObject, userPropertiesWhiteList:HashSet<string>, lenient:LenientParsing) : BusinessObject
    + {static} MapObject(jobject:JObject, userPropertiesWhiteList:HashSet<string>, lenient:LenientParsing) : BusinessObjectType
    + {static} GetValidBoNames() : HashSet<string>
    + {static} GetTypeForBoName(businessObjectName:string) : Type
    + {static} GetJsonSchemeFor(businessObjectName:string) : JSchema
    + {static} GetJsonSchemeFor(businessObjectType:Type) : JSchema
    + {static} GetAnnotatedFields(boName:string) : FieldInfo[]
    + {static} GetAnnotatedFields(type:Type) : FieldInfo[]
    + {static} GetAnnotatedFields(boType:Type, attributeType:Type) : FieldInfo[]
    + {static} GetAnnotatedFields(boName:string, attributeType:Type) : FieldInfo[]
}
@enduml
